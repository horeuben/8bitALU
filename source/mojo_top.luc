module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  //  edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      dff led_reg[8]; // storage for LED value
    
      counter ctr (#SIZE(3), #DIV(16));//counter to light up led segments 
      state mystate;
      
    }
  }
    seven_seg seven_seg0;
    seven_seg seven_seg1;
    seven_seg seven_seg2;
    seven_seg seven_seg3;
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    mystate.a = io_dip[0];
    mystate.b = io_dip[1];
    mystate.dipsw = io_dip[2][7];
    mystate.alufn = io_dip[2][5:0];
  
    seven_seg3.char = b1101;
    seven_seg2.char = mystate.z; //displays 100's digit
    seven_seg1.char = mystate.v; //displays 10's digit
    seven_seg0.char = mystate.n; //displays 1's digit

    //control the displaying of zvn 
     case(ctr.value){
      0:
        io_seg =~seven_seg0.segs; 
        io_sel = ~4b1;
      1: 
        io_seg=~seven_seg1.segs;
        io_sel = ~4b10;
      2:
        io_seg =~seven_seg2.segs;          
        io_sel = ~4b100;
      3: 
        io_seg=~seven_seg3.segs;
        io_sel = ~4b1000;
      default:
        io_seg=~seven_seg0.segs;
        io_sel = ~4b1;                
    }
    io_led = io_dip;          // connect the DIP switches to the LEDs
    led=mystate.out;         // make LED on FPGA below display result
    
  }
}