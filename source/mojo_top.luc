module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      state mystate;
      multi_seven_seg seg;
    }
  }

  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    mystate.a = io_dip[0];    //right most dip switch group
    mystate.b = io_dip[1];    // center dip switch group
    mystate.dipsw = io_dip[2][7]; // left most dip switch
    mystate.alufn = io_dip[2][5:0]; // left most dip switch group
  
    io_led = io_dip;      
    led=mystate.out;         // make LED on FPGA below display result
    io_led[0] = mystate.clk_a;  // connect the DIP switches to the LEDs
    io_led[1] = mystate.clk_b;
    
    seg.values[3] =0;
    seg.values[2] = mystate.z; // set z as 3rd from right led
    seg.values[1] = mystate.v; // set v as 2nd from right led
    seg.values[0] = mystate.n; // set n as first led
    
    io_seg = ~seg.seg;      // connect segments to counter
    io_sel = ~seg.sel;      // select all digits to display on 7seg led
    io_sel[3] = ~4h0;       // off last led

  }
}