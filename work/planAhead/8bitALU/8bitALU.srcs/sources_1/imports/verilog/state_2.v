/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module state_2 (
    input clk,
    input rst,
    input dipsw,
    input [5:0] alufn,
    input diperr,
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] out,
    output reg [2:0] z,
    output reg [2:0] v,
    output reg [2:0] n,
    output reg [7:0] clk_a,
    output reg [7:0] clk_b,
    output reg [5:0] alufnout
  );
  
  
  
  localparam MANUAL_state = 2'd0;
  localparam AUTO_state = 2'd1;
  localparam PAUSE_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = MANUAL_state;
  wire [8-1:0] M_mytester_a;
  wire [8-1:0] M_mytester_b;
  wire [6-1:0] M_mytester_alufn;
  wire [8-1:0] M_mytester_out;
  wire [1-1:0] M_mytester_z;
  wire [1-1:0] M_mytester_v;
  wire [1-1:0] M_mytester_n;
  wire [1-1:0] M_mytester_err;
  reg [1-1:0] M_mytester_forcederr;
  tester_4 mytester (
    .clk(clk),
    .rst(rst),
    .forcederr(M_mytester_forcederr),
    .a(M_mytester_a),
    .b(M_mytester_b),
    .alufn(M_mytester_alufn),
    .out(M_mytester_out),
    .z(M_mytester_z),
    .v(M_mytester_v),
    .n(M_mytester_n),
    .err(M_mytester_err)
  );
  
  wire [1-1:0] M_myalu_z;
  wire [1-1:0] M_myalu_v;
  wire [1-1:0] M_myalu_n;
  wire [8-1:0] M_myalu_alu;
  reg [8-1:0] M_myalu_a;
  reg [8-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn;
  alu_5 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn(M_myalu_alufn),
    .z(M_myalu_z),
    .v(M_myalu_v),
    .n(M_myalu_n),
    .alu(M_myalu_alu)
  );
  
  reg [7:0] displaya;
  
  reg [7:0] displayb;
  
  reg [5:0] alufnvar;
  
  always @* begin
    M_state_d = M_state_q;
    
    out = 1'h0;
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    M_myalu_alufn = alufn;
    M_myalu_a = 1'h0;
    M_myalu_b = 1'h0;
    clk_a = 1'h0;
    clk_b = 1'h0;
    displaya = 1'h0;
    displayb = 1'h0;
    alufnout = alufn;
    alufnvar = 1'h0;
    M_mytester_forcederr = diperr;
    
    case (M_state_q)
      MANUAL_state: begin
        M_myalu_a = a;
        M_myalu_b = b;
        M_myalu_alufn = alufn;
        out = M_myalu_alu;
        z = M_myalu_z;
        v = M_myalu_v;
        n = M_myalu_n;
        clk_a = a;
        clk_b = b;
        alufnout = alufn;
        if (diperr & M_myalu_alu != 8'hff) begin
          out = 8'hff;
          z = 2'h2;
          v = 2'h3;
          n = 2'h3;
        end
        if (dipsw) begin
          M_state_d = AUTO_state;
        end
      end
      AUTO_state: begin
        M_mytester_forcederr = diperr;
        out = M_mytester_out;
        z = M_mytester_z;
        v = M_mytester_v;
        n = M_mytester_n;
        clk_a = M_mytester_a;
        clk_b = M_mytester_b;
        displaya = M_mytester_a;
        displayb = M_mytester_b;
        alufnout = M_mytester_alufn;
        if (diperr & M_mytester_err == 1'h1) begin
          out = 8'hff;
          z = 2'h2;
          v = 2'h3;
          n = 2'h3;
        end
        if (!dipsw) begin
          M_state_d = MANUAL_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
