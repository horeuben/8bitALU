/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_mystate_out;
  wire [1-1:0] M_mystate_z;
  wire [1-1:0] M_mystate_v;
  wire [1-1:0] M_mystate_n;
  wire [8-1:0] M_mystate_clk_a;
  wire [8-1:0] M_mystate_clk_b;
  reg [1-1:0] M_mystate_dipsw;
  reg [6-1:0] M_mystate_alufn;
  reg [8-1:0] M_mystate_a;
  reg [8-1:0] M_mystate_b;
  state_2 mystate (
    .clk(clk),
    .rst(rst),
    .dipsw(M_mystate_dipsw),
    .alufn(M_mystate_alufn),
    .a(M_mystate_a),
    .b(M_mystate_b),
    .out(M_mystate_out),
    .z(M_mystate_z),
    .v(M_mystate_v),
    .n(M_mystate_n),
    .clk_a(M_mystate_clk_a),
    .clk_b(M_mystate_clk_b)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_mystate_a = io_dip[0+7-:8];
    M_mystate_b = io_dip[8+7-:8];
    M_mystate_dipsw = io_dip[16+7+0-:1];
    M_mystate_alufn = io_dip[16+0+5-:6];
    io_led = io_dip;
    led = M_mystate_out;
    io_led[0+7-:8] = M_mystate_clk_a;
    io_led[8+7-:8] = M_mystate_clk_b;
    M_seg_values[12+3-:4] = 1'h0;
    M_seg_values[8+3-:4] = M_mystate_z;
    M_seg_values[4+3-:4] = M_mystate_v;
    M_seg_values[0+3-:4] = M_mystate_n;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_sel[3+0-:1] = 4'hf;
  end
endmodule
